{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    //1) Check if user exist\n    const user = await User.findOne({\n      email: email\n    });\n\n    if (user) {\n      return res.json({\n        success: false,\n        msg: \"User already exist.\"\n      });\n    } //2) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); //saltRounds 10\n    //3) create user\n\n    const newUser = await new User({\n      name: name,\n      email: email,\n      password: hash\n    }).save(); //4) create token for the new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); //em 7 dias, o token n sera mais valido e o usuario tera que logar de novo pra gerar outro\n    //5) send back token\n\n    res.json({\n      success: true,\n      token: token\n    });\n  } catch (error) {\n    console.log(error);\n    res.json({\n      \"success\": false,\n      \"msg\": \"Error signup user. Please, try again later\"\n    });\n  }\n});","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/api/signup.js"],"names":["connectDb","User","bcrypt","jwt","req","res","name","email","password","body","user","findOne","json","success","msg","hash","newUser","save","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","error","console","log"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACA,MAAI;AAEF;AACA,UAAMC,IAAI,GAAG,MAAMT,IAAI,CAACU,OAAL,CAAa;AAACJ,MAAAA,KAAK,EAAEA;AAAR,KAAb,CAAnB;;AACA,QAAIG,IAAJ,EAAU;AACR,aAAOL,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAT,CAAP;AACD,KANC,CAQF;;;AACA,UAAMC,IAAI,GAAG,MAAMb,MAAM,CAACa,IAAP,CAAYP,QAAZ,EAAsB,EAAtB,CAAnB,CATE,CAS2C;AAE7C;;AACA,UAAMQ,OAAO,GAAG,MAAM,IAAIf,IAAJ,CAAS;AAC7BK,MAAAA,IAAI,EAAEA,IADuB;AAE7BC,MAAAA,KAAK,EAAEA,KAFsB;AAG7BC,MAAAA,QAAQ,EAAEO;AAHmB,KAAT,EAInBE,IAJmB,EAAtB,CAZE,CAkBF;;AACA,UAAMC,KAAK,GAAGf,GAAG,CAACgB,IAAJ,CACZ;AAAEC,MAAAA,MAAM,EAAEJ,OAAO,CAACK;AAAlB,KADY,EAEZC,OAAO,CAACC,GAAR,CAAYC,UAFA,EAGZ;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAHY,CAAd,CAnBE,CAuBA;AAEF;;AACApB,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,MAAAA,OAAO,EAAE,IAAV;AAAgBK,MAAAA,KAAK,EAAEA;AAAvB,KAAT;AACD,GA3BD,CA2BE,OAAMQ,KAAN,EAAa;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACArB,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAC,iBAAW,KAAZ;AAAmB,aAAO;AAA1B,KAAT;AACD;AACF,CAjCD","sourcesContent":["import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\n\nconnectDb();\n\nexport default async (req, res) => {\n  const { name, email, password } = req.body;\n  try {\n\n    //1) Check if user exist\n    const user = await User.findOne({email: email})\n    if (user) {\n      return res.json({ success: false, msg: \"User already exist.\" })\n    } \n\n    //2) --if not, hash their password\n    const hash = await bcrypt.hash(password, 10) //saltRounds 10\n    \n    //3) create user\n    const newUser = await new User({\n      name: name,\n      email: email, \n      password: hash\n    }).save();\n    \n    //4) create token for the new user\n    const token = jwt.sign(\n      { userId: newUser._id},\n      process.env.JWT_SECRET,\n      { expiresIn: '7d'}\n    ) //em 7 dias, o token n sera mais valido e o usuario tera que logar de novo pra gerar outro\n\n    //5) send back token\n    res.json({success: true, token: token})\n  } catch(error) {\n    console.log(error)\n    res.json({\"success\": false, \"msg\": \"Error signup user. Please, try again later\"})\n  }\n}"]},"metadata":{},"sourceType":"module"}