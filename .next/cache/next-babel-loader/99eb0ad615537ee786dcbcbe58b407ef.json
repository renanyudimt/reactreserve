{"ast":null,"code":"import Product from \"../../models/Product\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  const product = await Product.findOne({\n    _id: req.query.id\n  });\n\n  if (res.status(200)) {\n    res.json({\n      success: true,\n      product: product\n    });\n  } else {\n    res.json({\n      success: false,\n      msg: \"Product loading error\",\n      code: res.statusCode\n    });\n  }\n}\n\nasync function handlePostRequest(req, res) {\n  try {\n    const {\n      name,\n      price,\n      description,\n      mediaUrl\n    } = req.body;\n\n    if (!name || !price || !description || !mediaUrl) {\n      return res.status(422).json({\n        success: false,\n        msg: \"Product missing one or more fields\"\n      });\n    }\n\n    await new Product({\n      name,\n      price,\n      description,\n      mediaUrl\n    }).save();\n\n    if (res.statusCode == 200) {\n      res.send(201).json({\n        success: true\n      });\n    } else {\n      res.send(res.statusCode).json({\n        success: false,\n        err_code: res.statusCode\n      });\n    }\n  } catch (error) {\n    res.status(500).send(\"Server error in creating\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  await Product.findOneAndDelete({\n    _id: req.query.id\n  });\n\n  if (res.status(204)) {\n    res.json({});\n  }\n}\n\nasync function handlePutRequest(req, res) {}","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/api/product.js"],"names":["Product","connectDb","req","res","method","handleGetRequest","handlePostRequest","handleDeleteRequest","handlePutRequest","status","send","product","findOne","_id","query","id","json","success","msg","code","statusCode","name","price","description","mediaUrl","body","save","err_code","error","findOneAndDelete"],"mappings":"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","sourcesContent":["import Product from \"../../models/Product\";\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb(); \n\nexport default async(req, res) => {\n  switch(req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n}\n\nasync function handleGetRequest(req, res) {\n  const product = await Product.findOne({ _id: req.query.id });\n  if (res.status(200)) {\n    res.json({ success: true, product: product });\n  } else {\n    res.json({ success: false, msg: \"Product loading error\", code: res.statusCode });\n  }\n}\n\nasync function handlePostRequest(req, res) {\n  try {\n    const { name, price, description, mediaUrl } = req.body\n    if (!name || !price || !description || !mediaUrl) {\n      return res.status(422).json({ success: false, msg: \"Product missing one or more fields\" });\n    }\n  \n    await new Product({\n      name, \n      price, \n      description, \n      mediaUrl\n    }).save()\n\n    if (res.statusCode == 200) {\n      res.send(201).json({ success: true })\n    } else {\n      res.send(res.statusCode).json({ success: false, err_code: res.statusCode })\n    }\n    \n  } catch(error) {\n    res.status(500).send(\"Server error in creating\");\n  }\n \n} \n\nasync function handleDeleteRequest(req, res) {\n  await Product.findOneAndDelete({ _id: req.query.id });\n  if (res.status(204)) {\n    res.json({})\n  }\n}\n\nasync function handlePutRequest(req, res) {\n\n}"]},"metadata":{},"sourceType":"module"}