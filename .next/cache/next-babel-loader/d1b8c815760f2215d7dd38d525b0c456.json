{"ast":null,"code":"import _defineProperty from \"/Users/renanyudi/Sites/estudos/react-app/react-next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//Meu entendimento de Reducer e Context\n\n/**\n * Primeiro, crio esse reducer, com toda configuracao de storage de acordo com a action\n * Segundo, criei um componente chamado Store, que retorna um componente Provider, que ira.... \n * Criando tambem o contexto e o state inicial do role\n * \n * Nas outras paginas preciso importar o useContext() e passar o Context criado dentro do Store, depois, passar o type de execucao e payload.\n * https://codeburst.io/global-state-with-react-hooks-and-context-api-87019cc4f2cf\n */\nvar Reducer = function Reducer(state, action) {\n  switch (action.type) {\n    case \"SET_USER\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.user\n      });\n\n    case \"CLEAR\":\n      return {\n        user: false\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = Reducer;\nexport default Reducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reducer\");","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/utils/reducer.js"],"names":["Reducer","state","action","type","user"],"mappings":";;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,UAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,IAAI,EAAEF,MAAM,CAACE;AAFf;;AAKF,SAAK,OAAL;AACE,aAAO;AACLA,QAAAA,IAAI,EAAE;AADD,OAAP;;AAIF;AACE,aAAOH,KAAP;AAbJ;AAeD,CAhBD;;KAAMD,O;AAkBN,eAAeA,OAAf","sourcesContent":["//Meu entendimento de Reducer e Context\n\n/**\n * Primeiro, crio esse reducer, com toda configuracao de storage de acordo com a action\n * Segundo, criei um componente chamado Store, que retorna um componente Provider, que ira.... \n * Criando tambem o contexto e o state inicial do role\n * \n * Nas outras paginas preciso importar o useContext() e passar o Context criado dentro do Store, depois, passar o type de execucao e payload.\n * https://codeburst.io/global-state-with-react-hooks-and-context-api-87019cc4f2cf\n */\n\nconst Reducer = (state, action) => {\n  switch(action.type) {\n    case \"SET_USER\":\n      return {\n        ...state, \n        user: action.user\n      }\n\n    case \"CLEAR\":\n      return {\n        user: false\n      };\n\n    default: \n      return state;\n  }\n}\n\nexport default Reducer;\n"]},"metadata":{},"sourceType":"module"}