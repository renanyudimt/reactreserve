{"ast":null,"code":"import Stripe from \"stripe\";\nimport uuid from \"uuid\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport Order from \"../../models/Order\";\nimport calculateCartTotal from \"../../utils/calculateCartTotal\";\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY);\nexport default async function (req, res) {\n  const {\n    paymentData\n  } = req.body;\n  console.log(\"porra e essa\", paymentData);\n\n  try {\n    //1) Verify and get user from token\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); //2) Find Cart based on user id, populate it\n\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    }); //3) Calculate cart totals again from cart products\n\n    const {\n      cartTotal,\n      stripeTotal\n    } = calculateCartTotal(cart.products); //4) Get de email from payment data, see if email linked with existing stripe customer \n\n    const previousCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    });\n    const isExistingPreviousCustomer = previousCustomer.data.length > 0; //5) if not, create them based on their email\n\n    let newCustomer;\n\n    if (!isExistingPreviousCustomer) {\n      await stripe.customers.create({\n        email: paymentData.eamil,\n        source: paymentData.id\n      });\n    }\n\n    const customer = isExistingPreviousCustomer && previousCustomer.data[0].id || newCustomer.id; //6) Create charge with total, send receipt Email\n\n    await stripe.charge.create({\n      currency: \"USD\",\n      amount: stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id}`\n    }, {\n      //necessario para verificar se a folha de pagamento,\n      //por qualquer que seja o motivo, nao foi executada mais de 1x, para evitar isso, se colocar uma unique string\n      idempotency_key: uuid()\n    }); //7) Add order data to database \n\n    await new Order({\n      userId: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.products\n    }); //8) Clear products in cart\n\n    await Cart.findOneAndUpdate({\n      _id: cart._id\n    }, {\n      $set: {\n        products: []\n      }\n    }); //9) Send back success (200) response\n\n    res.status(200).json({\n      success: true,\n      msg: \"Checkout successful\"\n    });\n  } catch (error) {\n    console.log(\"error\", error);\n    res.status(500).send(\"Error processing charge\");\n  }\n}","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/api/checkout.js"],"names":["Stripe","uuid","jwt","Cart","Order","calculateCartTotal","stripe","process","env","STRIPE_SECRET_KEY","req","res","paymentData","body","console","log","userId","verify","headers","authorization","JWT_SECRET","cart","findOne","user","populate","path","model","cartTotal","stripeTotal","products","previousCustomer","customers","list","email","limit","isExistingPreviousCustomer","data","length","newCustomer","create","eamil","source","id","customer","charge","currency","amount","receipt_email","description","idempotency_key","total","findOneAndUpdate","_id","$set","status","json","success","msg","error","send"],"mappings":"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","sourcesContent":["import Stripe from \"stripe\"\nimport uuid from \"uuid\"\nimport jwt from \"jsonwebtoken\"\nimport Cart from \"../../models/Cart\"\nimport Order from \"../../models/Order\"\nimport calculateCartTotal from \"../../utils/calculateCartTotal\"\n\nconst stripe = Stripe(process.env.STRIPE_SECRET_KEY)\n\nexport default async function(req, res) {\n  const { paymentData } = req.body;\n  console.log(\"porra e essa\", paymentData)\n  try {\n    //1) Verify and get user from token\n    const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n    //2) Find Cart based on user id, populate it\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    })\n    //3) Calculate cart totals again from cart products\n    const { cartTotal, stripeTotal } = calculateCartTotal(cart.products) \n    //4) Get de email from payment data, see if email linked with existing stripe customer \n    const previousCustomer = await stripe.customers.list({\n      email: paymentData.email,\n      limit: 1\n    })\n    const isExistingPreviousCustomer = previousCustomer.data.length > 0\n    //5) if not, create them based on their email\n    let newCustomer;\n\n    if (!isExistingPreviousCustomer) {\n      await stripe.customers.create({\n        email: paymentData.eamil,\n        source: paymentData.id\n      })\n    }\n\n    const customer = (isExistingPreviousCustomer && previousCustomer.data[0].id) || newCustomer.id; \n    //6) Create charge with total, send receipt Email\n    await stripe.charge.create({\n      currency: \"USD\",\n      amount: stripeTotal,\n      receipt_email: paymentData.email,\n      customer,\n      description: `Checkout | ${paymentData.email} | ${paymentData.id}` \n    }, {\n      //necessario para verificar se a folha de pagamento,\n      //por qualquer que seja o motivo, nao foi executada mais de 1x, para evitar isso, se colocar uma unique string\n      idempotency_key: uuid() \n    })\n    //7) Add order data to database \n    await new Order({\n      userId: userId,\n      email: paymentData.email,\n      total: cartTotal,\n      products: cart.products\n    })\n    //8) Clear products in cart\n    await Cart.findOneAndUpdate(\n      { _id: cart._id },\n      { $set: { products: [] }}\n    )\n    //9) Send back success (200) response\n    res.status(200).json({ success: true, msg: \"Checkout successful\"})\n  } catch(error) {\n    console.log(\"error\", error)\n    res.status(500).send(\"Error processing charge\")\n  }\n}"]},"metadata":{},"sourceType":"module"}