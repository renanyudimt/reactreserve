{"ast":null,"code":"import Product from \"../../models/Product\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await handleGetRequest(req, res);\n      break;\n\n    case \"POST\":\n      await handlePostRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      await handleDeleteRequest(req, res);\n      break;\n\n    case \"PUT\":\n      await handlePutRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleGetRequest(req, res) {\n  const product = await Product.findOne({\n    _id: req.query.id\n  });\n\n  if (res.status(200)) {\n    res.json({\n      success: true,\n      product: product\n    });\n  } else {\n    res.json({\n      success: false,\n      msg: \"Product loading error\",\n      code: res.statusCode\n    });\n  }\n}\n\nasync function handlePostRequest(req, res) {\n  try {\n    const {\n      name,\n      price,\n      description,\n      mediaUrl\n    } = req.body;\n\n    if (!name || !price || !description || !mediaUrl) {\n      return res.json({\n        success: false,\n        msg: \"Product missing one or more fields\"\n      });\n    }\n\n    await new Product({\n      name,\n      price,\n      description,\n      mediaUrl\n    }).save();\n\n    if (res.statusCode == 200) {\n      res.json({\n        success: true\n      });\n    } else {\n      res.json({\n        success: false,\n        err_code: res.statusCode\n      });\n    }\n  } catch (error) {\n    res.status(500).send(\"Server error in creating\");\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  console.log(req);\n  await Product.findOneAndDelete({\n    _id: req.query.id\n  });\n\n  if (res.status(204)) {\n    res.json({});\n  }\n}\n\nasync function handlePutRequest(req, res) {}","map":null,"metadata":{},"sourceType":"module"}