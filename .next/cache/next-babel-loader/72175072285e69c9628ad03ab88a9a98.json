{"ast":null,"code":"import mongoose from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport connectDb from \"../../utils/connectDb\";\nconnectDb();\nconst {\n  ObjectId\n} = mongoose.Types;\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      handleDeleteRequest(req, res);\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`);\n      break;\n  }\n});\n\nasync function handleDeleteRequest(req, res) {}\n\nasync function handlePutRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).json({\n      success: false,\n      msg: \"No authorization token\"\n    });\n  }\n\n  try {\n    const {\n      quantity,\n      productId\n    } = req.body;\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET); //get user cart based on userId\n\n    const cart = await Cart.findOne({\n      user: userId\n    }); //check if product already exist\n\n    const productExist = cart.products.some(doc => ObjectId(productId).equals(doc.product)); //verifica se pelo menos 1 existe e retorna true\n    //if so, increment quantity,\n\n    if (productExist) {\n      const filter = {\n        _id: cart._id,\n        \"products.product\": productId\n      };\n      const update = {\n        $inc: {\n          \"products.$.quantity\": quantity\n        }\n      };\n      const response = await Cart.findOneAndUpdate(filter, update);\n\n      if (response) {\n        res.status(200).json({\n          success: true,\n          msg: \"Product updated successfully\"\n        });\n      } else {\n        res.status(403).send(\"Add product fail\");\n      } //if not, add new product with quantity\n\n    } else {\n      const newProduct = {\n        quantity,\n        product: productId\n      };\n      const filter = {\n        _id: cart._id\n      };\n      const update = {\n        $addToSet: {\n          products: newProduct\n        }\n      };\n      const response = await Cart.findOneAndUpdate(filter, update);\n\n      if (response) {\n        res.status(200).json({\n          success: true,\n          msg: \"Product updated successfully\"\n        });\n      } else {\n        res.status(403).send(\"Add product fail\");\n      }\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    res.status(403).send(\"Please, login again.\");\n  }\n}\n\nasync function handleGetRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).json({\n      success: false,\n      msg: \"No authorization token\"\n    });\n  }\n\n  try {\n    const {\n      userId\n    } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET);\n    const cart = await Cart.findOne({\n      user: userId\n    }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    });\n\n    if (res.statusCode == 200) {\n      res.status(200).json({\n        success: true,\n        cart: cart.products\n      });\n    }\n  } catch (error) {\n    console.log(\"error\", error);\n    res.status(403).json({\n      success: false,\n      msg: \"Please, login again.\"\n    });\n  }\n}","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/api/cart.js"],"names":["mongoose","jwt","Cart","connectDb","ObjectId","Types","req","res","method","handleGetRequest","handlePutRequest","handleDeleteRequest","status","send","headers","json","success","msg","quantity","productId","body","userId","verify","authorization","process","env","JWT_SECRET","cart","findOne","user","productExist","products","some","doc","equals","product","filter","_id","update","$inc","response","findOneAndUpdate","newProduct","$addToSet","error","console","log","populate","path","model","statusCode"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEAA,SAAS;AACT,MAAM;AAAEC,EAAAA;AAAF,IAAeJ,QAAQ,CAACK,KAA9B;AAEA,gBAAe,OAAMC,GAAN,EAAWC,GAAX,KAAmB;AAEhC,UAAOD,GAAG,CAACE,MAAX;AACE,SAAK,KAAL;AACEC,MAAAA,gBAAgB,CAACH,GAAD,EAAMC,GAAN,CAAhB;AACA;;AAEF,SAAK,KAAL;AACEG,MAAAA,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,CAAhB;AACA;;AAEF,SAAK,QAAL;AACEI,MAAAA,mBAAmB,CAACL,GAAD,EAAMC,GAAN,CAAnB;AACA;;AAEF;AACEA,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,UAASP,GAAG,CAACE,MAAO,cAA1C;AACA;AAfJ;AAkBD,CApBD;;AAsBA,eAAeG,mBAAf,CAAmCL,GAAnC,EAAwCC,GAAxC,EAA6C,CAE5C;;AAED,eAAeG,gBAAf,CAAgCJ,GAAhC,EAAqCC,GAArC,EAA0C;AACxC,MAAI,EAAE,mBAAmBD,GAAG,CAACQ,OAAzB,CAAJ,EAAuC;AACrC,WAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,GAAG,EAAE;AAAvB,KAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA0Bb,GAAG,CAACc,IAApC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAapB,GAAG,CAACqB,MAAJ,CAAWhB,GAAG,CAACQ,OAAJ,CAAYS,aAAvB,EAAsCC,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAnB,CAFE,CAIF;;AACA,UAAMC,IAAI,GAAG,MAAMzB,IAAI,CAAC0B,OAAL,CAAa;AAAEC,MAAAA,IAAI,EAAER;AAAR,KAAb,CAAnB,CALE,CAMF;;AACA,UAAMS,YAAY,GAAGH,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAmBC,GAAG,IAAI7B,QAAQ,CAACe,SAAD,CAAR,CAAoBe,MAApB,CAA2BD,GAAG,CAACE,OAA/B,CAA1B,CAArB,CAPE,CAOsF;AACxF;;AACA,QAAIL,YAAJ,EAAkB;AAChB,YAAMM,MAAM,GAAG;AAAEC,QAAAA,GAAG,EAAEV,IAAI,CAACU,GAAZ;AAAiB,4BAAoBlB;AAArC,OAAf;AACA,YAAMmB,MAAM,GAAG;AAAEC,QAAAA,IAAI,EAAE;AAAE,iCAAuBrB;AAAzB;AAAR,OAAf;AACA,YAAMsB,QAAQ,GAAG,MAAMtC,IAAI,CAACuC,gBAAL,CAAsBL,MAAtB,EAA6BE,MAA7B,CAAvB;;AAEA,UAAIE,QAAJ,EAAc;AACZjC,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,GAAG,EAAE;AAAtB,SAArB;AACD,OAFD,MAEO;AACLV,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACD,OATe,CAWlB;;AACC,KAZD,MAYO;AACL,YAAM6B,UAAU,GAAG;AAAExB,QAAAA,QAAF;AAAYiB,QAAAA,OAAO,EAAEhB;AAArB,OAAnB;AACA,YAAMiB,MAAM,GAAG;AAAEC,QAAAA,GAAG,EAAEV,IAAI,CAACU;AAAZ,OAAf;AACA,YAAMC,MAAM,GAAG;AAAEK,QAAAA,SAAS,EAAE;AAAEZ,UAAAA,QAAQ,EAAEW;AAAZ;AAAb,OAAf;AACA,YAAMF,QAAQ,GAAG,MAAMtC,IAAI,CAACuC,gBAAL,CAAsBL,MAAtB,EAA6BE,MAA7B,CAAvB;;AAEA,UAAIE,QAAJ,EAAc;AACZjC,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,GAAG,EAAE;AAAtB,SAArB;AACD,OAFD,MAEO;AACLV,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,kBAArB;AACD;AACF;AACF,GAjCD,CAiCE,OAAM+B,KAAN,EAAa;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACArC,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB;AACD;AAEF;;AAED,eAAeJ,gBAAf,CAAgCH,GAAhC,EAAqCC,GAArC,EAA0C;AAExC,MAAI,EAAE,mBAAmBD,GAAG,CAACQ,OAAzB,CAAJ,EAAuC;AACrC,WAAOP,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,GAAG,EAAE;AAAvB,KAArB,CAAP;AACD;;AAED,MAAI;AACF,UAAM;AAAEI,MAAAA;AAAF,QAAapB,GAAG,CAACqB,MAAJ,CAAWhB,GAAG,CAACQ,OAAJ,CAAYS,aAAvB,EAAsCC,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAnB;AACA,UAAMC,IAAI,GAAG,MAAMzB,IAAI,CAAC0B,OAAL,CAAa;AAAEC,MAAAA,IAAI,EAAER;AAAR,KAAb,EAA+B0B,QAA/B,CAAwC;AACzDC,MAAAA,IAAI,EAAE,kBADmD;AAEzDC,MAAAA,KAAK,EAAE;AAFkD,KAAxC,CAAnB;;AAKA,QAAI1C,GAAG,CAAC2C,UAAJ,IAAkB,GAAtB,EAA2B;AACzB3C,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAACC,QAAAA,OAAO,EAAE,IAAV;AAAgBW,QAAAA,IAAI,EAAEA,IAAI,CAACI;AAA3B,OAArB;AACD;AAEF,GAXD,CAWE,OAAMa,KAAN,EAAa;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACArC,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,GAAG,EAAE;AAAvB,KAArB;AACD;AACF","sourcesContent":["import mongoose from \"mongoose\";\nimport jwt from \"jsonwebtoken\";\nimport Cart from \"../../models/Cart\";\nimport connectDb from \"../../utils/connectDb\";\n\nconnectDb();\nconst { ObjectId } = mongoose.Types\n\nexport default async(req, res) => {\n\n  switch(req.method) {\n    case \"GET\":\n      handleGetRequest(req, res);\n      break;\n\n    case \"PUT\":\n      handlePutRequest(req, res);\n      break;\n\n    case \"DELETE\":\n      handleDeleteRequest(req, res)\n      break;\n\n    default:\n      res.status(405).send(`Method ${req.method} not allowed`)\n      break\n\n  }\n}\n\nasync function handleDeleteRequest(req, res) {\n  \n}\n\nasync function handlePutRequest(req, res) {\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).json({ success: false, msg: \"No authorization token\" })\n  }\n\n  try {\n    const { quantity, productId } = req.body;\n    const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n\n    //get user cart based on userId\n    const cart = await Cart.findOne({ user: userId })\n    //check if product already exist\n    const productExist = cart.products.some(doc => ObjectId(productId).equals(doc.product)) //verifica se pelo menos 1 existe e retorna true\n    //if so, increment quantity,\n    if (productExist) {\n      const filter = { _id: cart._id, \"products.product\": productId }\n      const update = { $inc: { \"products.$.quantity\": quantity }}\n      const response = await Cart.findOneAndUpdate(filter,update)\n\n      if (response) {\n        res.status(200).json({ success: true, msg: \"Product updated successfully\" })\n      } else {\n        res.status(403).send(\"Add product fail\")\n      }\n\n    //if not, add new product with quantity\n    } else {\n      const newProduct = { quantity, product: productId }\n      const filter = { _id: cart._id }\n      const update = { $addToSet: { products: newProduct }}\n      const response = await Cart.findOneAndUpdate(filter,update)\n\n      if (response) {\n        res.status(200).json({ success: true, msg: \"Product updated successfully\" })\n      } else {\n        res.status(403).send(\"Add product fail\")\n      }\n    }\n  } catch(error) {\n    console.log(\"error\", error)\n    res.status(403).send(\"Please, login again.\")\n  }\n\n}\n\nasync function handleGetRequest(req, res) {\n\n  if (!(\"authorization\" in req.headers)) {\n    return res.status(401).json({ success: false, msg: \"No authorization token\" })\n  }\n\n  try {\n    const { userId } = jwt.verify(req.headers.authorization, process.env.JWT_SECRET)\n    const cart = await Cart.findOne({ user: userId }).populate({\n      path: \"products.product\",\n      model: \"Product\"\n    })\n\n    if (res.statusCode == 200) {\n      res.status(200).json({success: true, cart: cart.products})\n    }\n\n  } catch(error) {\n    console.log(\"error\", error)\n    res.status(403).json({ success: false, msg: \"Please, login again.\"})\n  }\n}"]},"metadata":{},"sourceType":"module"}