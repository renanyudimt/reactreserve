{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLenght from \"validator/lib/isLength\";\nimport Cart from \"../../models/Cart\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    //0) Validade name/email/pass\n    if (!isLenght(name, {\n      min: 3,\n      max: 10\n    })) {\n      return res.json({\n        success: false,\n        msg: \"Name must be 3-10 characters long.\"\n      });\n    } else if (!isLenght(password, {\n      min: 4\n    })) {\n      return res.json({\n        success: false,\n        msg: \"Password must be at least 4 characters long.\"\n      });\n    } else if (!isEmail(email)) {\n      return res.json({\n        success: false,\n        msg: \"Email not valid\"\n      });\n    } //1) Check if user exist\n\n\n    const user = await User.findOne({\n      email: email\n    });\n\n    if (user) {\n      return res.json({\n        success: false,\n        msg: \"User already exist.\"\n      });\n    } //2) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); //saltRounds 10\n    //3) create user\n\n    const newUser = await new User({\n      name: name,\n      email: email,\n      password: hash\n    }).save(); //3.5) create new cart for user\n\n    await new Cart({\n      user: newUser._id\n    }).save(); //4) create token for the new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); //em 7 dias, o token n sera mais valido e o usuario tera que logar de novo pra gerar outro\n    //5) send back token\n\n    res.json({\n      success: true,\n      token: token\n    });\n  } catch (error) {\n    console.log(error);\n    res.json({\n      \"success\": false,\n      \"msg\": \"Error signup user. Please, try again later\"\n    });\n  }\n});","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/api/signup.js"],"names":["connectDb","User","bcrypt","jwt","isEmail","isLenght","Cart","req","res","name","email","password","body","min","max","json","success","msg","user","findOne","hash","newUser","save","_id","token","sign","userId","process","env","JWT_SECRET","expiresIn","error","console","log"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEAN,SAAS;AAET,gBAAe,OAAOO,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA4BJ,GAAG,CAACK,IAAtC;;AACA,MAAI;AACF;AACA,QAAI,CAACP,QAAQ,CAACI,IAAD,EAAO;AAAEI,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAAP,CAAb,EAAyC;AACvC,aAAON,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAT,CAAP;AACD,KAFD,MAEO,IAAG,CAACZ,QAAQ,CAACM,QAAD,EAAW;AAAEE,MAAAA,GAAG,EAAE;AAAP,KAAX,CAAZ,EAAoC;AACzC,aAAOL,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAT,CAAP;AACD,KAFM,MAEA,IAAI,CAACb,OAAO,CAACM,KAAD,CAAZ,EAAqB;AAC1B,aAAOF,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAT,CAAP;AACD,KARC,CAUF;;;AACA,UAAMC,IAAI,GAAG,MAAMjB,IAAI,CAACkB,OAAL,CAAa;AAACT,MAAAA,KAAK,EAAEA;AAAR,KAAb,CAAnB;;AACA,QAAIQ,IAAJ,EAAU;AACR,aAAOV,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAT,CAAP;AACD,KAdC,CAgBF;;;AACA,UAAMG,IAAI,GAAG,MAAMlB,MAAM,CAACkB,IAAP,CAAYT,QAAZ,EAAsB,EAAtB,CAAnB,CAjBE,CAiB2C;AAE7C;;AACA,UAAMU,OAAO,GAAG,MAAM,IAAIpB,IAAJ,CAAS;AAC7BQ,MAAAA,IAAI,EAAEA,IADuB;AAE7BC,MAAAA,KAAK,EAAEA,KAFsB;AAG7BC,MAAAA,QAAQ,EAAES;AAHmB,KAAT,EAInBE,IAJmB,EAAtB,CApBE,CA0BF;;AACA,UAAM,IAAIhB,IAAJ,CAAS;AAAEY,MAAAA,IAAI,EAAEG,OAAO,CAACE;AAAhB,KAAT,EAAgCD,IAAhC,EAAN,CA3BE,CA6BF;;AACA,UAAME,KAAK,GAAGrB,GAAG,CAACsB,IAAJ,CACZ;AAAEC,MAAAA,MAAM,EAAEL,OAAO,CAACE;AAAlB,KADY,EAEZI,OAAO,CAACC,GAAR,CAAYC,UAFA,EAGZ;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAHY,CAAd,CA9BE,CAkCA;AAEF;;AACAtB,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,MAAAA,OAAO,EAAE,IAAV;AAAgBQ,MAAAA,KAAK,EAAEA;AAAvB,KAAT;AACD,GAtCD,CAsCE,OAAMO,KAAN,EAAa;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAvB,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAC,iBAAW,KAAZ;AAAmB,aAAO;AAA1B,KAAT;AACD;AACF,CA5CD","sourcesContent":["import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLenght from \"validator/lib/isLength\";\nimport Cart from \"../../models/Cart\";\n\nconnectDb();\n\nexport default async (req, res) => {\n  const { name, email, password } = req.body;\n  try {\n    //0) Validade name/email/pass\n    if (!isLenght(name, { min: 3, max: 10})) {\n      return res.json({ success: false, msg: \"Name must be 3-10 characters long.\"})\n    } else if(!isLenght(password, { min: 4 })) {\n      return res.json({ success: false, msg: \"Password must be at least 4 characters long.\"})\n    } else if (!isEmail(email)) {\n      return res.json({ success: false, msg: \"Email not valid\" })\n    }\n\n    //1) Check if user exist\n    const user = await User.findOne({email: email})\n    if (user) {\n      return res.json({ success: false, msg: \"User already exist.\" })\n    } \n\n    //2) --if not, hash their password\n    const hash = await bcrypt.hash(password, 10) //saltRounds 10\n    \n    //3) create user\n    const newUser = await new User({\n      name: name,\n      email: email, \n      password: hash\n    }).save();\n\n    //3.5) create new cart for user\n    await new Cart({ user: newUser._id }).save();\n    \n    //4) create token for the new user\n    const token = jwt.sign(\n      { userId: newUser._id},\n      process.env.JWT_SECRET,\n      { expiresIn: '7d'}\n    ) //em 7 dias, o token n sera mais valido e o usuario tera que logar de novo pra gerar outro\n\n    //5) send back token\n    res.json({success: true, token: token})\n  } catch(error) {\n    console.log(error)\n    res.json({\"success\": false, \"msg\": \"Error signup user. Please, try again later\"})\n  }\n}"]},"metadata":{},"sourceType":"module"}