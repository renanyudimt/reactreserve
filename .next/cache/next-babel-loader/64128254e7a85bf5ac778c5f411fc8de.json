{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport React from \"react\";\nimport { Context } from \"../../components/_App/Layout\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    //1) Check if user exist\n    const user = await User.findOne({\n      email\n    }).select(\"+password\"); //no model, select ta false, entao nao tras, com esse select, vai mostrar se achar um usuario com email tal\n    //2) --if not, return error\n\n    if (!user) {\n      return res.json({\n        success: false,\n        msg: \"User email or password is incorrect\"\n      });\n    } //3) check if users password is correct\n\n\n    const passMatch = await bcrypt.compare(password, user.password); //comparando os 2 \n    //4) --if so, generate token\n\n    if (passMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: \"7d\"\n      });\n      /*  const [state, dispatch] = React.useContext(Context)\n       dispatch({type: \"SET_USER\", user: user}) */\n      //5) send token to client\n\n      return res.json({\n        success: true,\n        token: token\n      });\n    } else {\n      return res.json({\n        success: false,\n        msg: \"User email or password is incorrect\"\n      });\n    }\n  } catch (error) {\n    console.log(error);\n    res.status(500).send(\"Error logging in user\");\n  }\n});","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/api/login.js"],"names":["connectDb","User","bcrypt","jwt","React","Context","req","res","email","password","body","user","findOne","select","json","success","msg","passMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","error","console","log","status","send"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AAEAL,SAAS;AAET,gBAAe,OAAOM,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AAEA,MAAI;AACF;AACA,UAAMC,IAAI,GAAG,MAAMV,IAAI,CAACW,OAAL,CAAa;AAAEJ,MAAAA;AAAF,KAAb,EAAwBK,MAAxB,CAA+B,WAA/B,CAAnB,CAFE,CAE6D;AAE/D;;AACA,QAAI,CAACF,IAAL,EAAW;AACT,aAAOJ,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAT,CAAP;AACD,KAPC,CASF;;;AACA,UAAMC,SAAS,GAAG,MAAMf,MAAM,CAACgB,OAAP,CAAeT,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAAxB,CAVE,CAU8D;AAEhE;;AACA,QAAIQ,SAAJ,EAAe;AACb,YAAME,KAAK,GAAGhB,GAAG,CAACiB,IAAJ,CAAS;AAACC,QAAAA,MAAM,EAAEV,IAAI,CAACW;AAAd,OAAT,EAA8BC,OAAO,CAACC,GAAR,CAAYC,UAA1C,EAAsD;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAtD,CAAd;AACD;AACL;AACM;;AACA,aAAOnB,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBI,QAAAA,KAAK,EAAEA;AAAxB,OAAT,CAAP;AACD,KAND,MAMO;AACL,aAAOZ,GAAG,CAACO,IAAJ,CAAS;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,GAAG,EAAE;AAAvB,OAAT,CAAP;AACD;AAEF,GAvBD,CAuBE,OAAMW,KAAN,EAAa;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACApB,IAAAA,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACD;AACF,CA9BD","sourcesContent":["import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport React from \"react\";\nimport { Context } from \"../../components/_App/Layout\"\n\nconnectDb();\n\nexport default async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    //1) Check if user exist\n    const user = await User.findOne({ email }).select(\"+password\") //no model, select ta false, entao nao tras, com esse select, vai mostrar se achar um usuario com email tal\n\n    //2) --if not, return error\n    if (!user) {\n      return res.json({ success: false, msg: \"User email or password is incorrect\" });\n    }\n\n    //3) check if users password is correct\n    const passMatch = await bcrypt.compare(password, user.password) //comparando os 2 \n\n    //4) --if so, generate token\n    if (passMatch) {\n      const token = jwt.sign({userId: user._id }, process.env.JWT_SECRET, { expiresIn: \"7d\" })\n     /*  const [state, dispatch] = React.useContext(Context)\n      dispatch({type: \"SET_USER\", user: user}) */\n      //5) send token to client\n      return res.json({ success: true, token: token })\n    } else {\n      return res.json({ success: false, msg: \"User email or password is incorrect\" });\n    }\n\n  } catch(error) {\n    console.log(error); \n    res.status(500).send(\"Error logging in user\")\n  }\n}"]},"metadata":{},"sourceType":"module"}