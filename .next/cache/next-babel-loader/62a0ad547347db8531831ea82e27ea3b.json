{"ast":null,"code":"import _regeneratorRuntime from \"/Users/renanyudi/Sites/estudos/react-app/react-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/renanyudi/Sites/estudos/react-app/react-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport cookies from \"js-cookie\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport baseUrl from \"../../utils/baseUrl\";\nimport { Context } from \"../Store/Store\";\n\nfunction Validation(_ref) {\n  var children = _ref.children;\n  return __jsx(React.Fragment, null, children);\n}\n\n_c = Validation;\nexport function getUserLoggedIn() {\n  _s();\n\n  var _useContext = useContext(Context),\n      state = _useContext[0],\n      dispatch = _useContext[1];\n\n  var token = cookies.get('reactreserve_token');\n  var router = useRouter();\n  var pathname = router.pathname;\n  var isProtectedRoute = pathname === \"/account\" || pathname === \"/create\";\n\n  function validateUser() {\n    return _validateUser.apply(this, arguments);\n  }\n\n  function _validateUser() {\n    _validateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var url, payload;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              url = \"\".concat(baseUrl, \"/api/account\");\n              payload = {\n                headers: {\n                  Authorization: token\n                }\n              };\n              _context.next = 5;\n              return axios.post(url, {}, payload).then(function (response) {\n                if (response.data.success) {\n                  dispatch({\n                    type: \"SET_USER\",\n                    user: response.data.user\n                  });\n                  console.log(state);\n                } else {\n                  dispatch({\n                    type: \"CLEAR\"\n                  });\n                }\n              })[\"catch\"](function (error) {\n                return console.log(\"Error\", error);\n              });\n\n            case 5:\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              cookie.remove(\"reactreserve_token\");\n              router.push(\"/login\");\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n    return _validateUser.apply(this, arguments);\n  }\n\n  if (token) {\n    validateUser();\n  } else {\n    if (isProtectedRoute) {\n      router.push(\"/login\");\n    }\n  }\n\n  return {\n    props: {} // will be passed to the page component as props\n\n  };\n}\n\n_s(getUserLoggedIn, \"EHNB1emd47b8EJ/41cB7CZs10sQ=\", false, function () {\n  return [useRouter];\n});\n\nexport default Validation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/components/Validation/Validation.js"],"names":["React","useContext","cookies","useRouter","axios","baseUrl","Context","Validation","children","getUserLoggedIn","state","dispatch","token","get","router","pathname","isProtectedRoute","validateUser","url","payload","headers","Authorization","post","then","response","data","success","type","user","console","log","error","cookie","remove","push","props"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,SAASC,UAAT,OAAkC;AAAA,MAAZC,QAAY,QAAZA,QAAY;AAChC,SACE,4BACIA,QADJ,CADF;AAKD;;KANQD,U;AAQT,OAAO,SAASE,eAAT,GAA2B;AAAA;;AAAA,oBACNR,UAAU,CAACK,OAAD,CADJ;AAAA,MACzBI,KADyB;AAAA,MAClBC,QADkB;;AAEhC,MAAMC,KAAK,GAAGV,OAAO,CAACW,GAAR,CAAY,oBAAZ,CAAd;AACA,MAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,MAAMY,QAAQ,GAAGD,MAAM,CAACC,QAAxB;AACA,MAAMC,gBAAgB,GAAID,QAAQ,KAAK,UAAb,IAA2BA,QAAQ,KAAK,SAAlE;;AALgC,WAOjBE,YAPiB;AAAA;AAAA;;AAAA;AAAA,6EAOhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEUC,cAAAA,GAFV,aAEmBb,OAFnB;AAGUc,cAAAA,OAHV,GAGoB;AAAEC,gBAAAA,OAAO,EAAE;AAAEC,kBAAAA,aAAa,EAAET;AAAjB;AAAX,eAHpB;AAAA;AAAA,qBAIUR,KAAK,CAACkB,IAAN,CAAWJ,GAAX,EAAgB,EAAhB,EAAoBC,OAApB,EACHI,IADG,CACE,UAAAC,QAAQ,EAAI;AAChB,oBAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzBf,kBAAAA,QAAQ,CAAC;AAAEgB,oBAAAA,IAAI,EAAE,UAAR;AAAoBC,oBAAAA,IAAI,EAAEJ,QAAQ,CAACC,IAAT,CAAcG;AAAxC,mBAAD,CAAR;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAZ;AACD,iBAHD,MAGO;AACLC,kBAAAA,QAAQ,CAAC;AAAEgB,oBAAAA,IAAI,EAAE;AAAR,mBAAD,CAAR;AACD;AACF,eARG,WASG,UAAAI,KAAK;AAAA,uBAAIF,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,KAArB,CAAJ;AAAA,eATR,CAJV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAeIC,cAAAA,MAAM,CAACC,MAAP,CAAc,oBAAd;AACAnB,cAAAA,MAAM,CAACoB,IAAP,CAAY,QAAZ;;AAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAPgC;AAAA;AAAA;;AA2BhC,MAAItB,KAAJ,EAAW;AACTK,IAAAA,YAAY;AACb,GAFD,MAEO;AACL,QAAID,gBAAJ,EAAsB;AACpBF,MAAAA,MAAM,CAACoB,IAAP,CAAY,QAAZ;AACD;AACF;;AAED,SAAO;AACLC,IAAAA,KAAK,EAAE,EADF,CACM;;AADN,GAAP;AAGD;;GAtCe1B,e;UAGCN,S;;;AAsCjB,eAAeI,UAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport cookies from \"js-cookie\";\nimport { useRouter } from \"next/router\"\nimport axios from \"axios\"\nimport baseUrl from \"../../utils/baseUrl\";\nimport { Context } from \"../Store/Store\";\n\nfunction Validation({ children }) {\n  return (\n    <>\n      { children }\n    </>\n  )\n}\n\nexport function getUserLoggedIn() {\n  const [state, dispatch] = useContext(Context);\n  const token = cookies.get('reactreserve_token')\n  const router = useRouter();\n  const pathname = router.pathname;\n  const isProtectedRoute = (pathname === \"/account\" || pathname === \"/create\");\n\n  async function validateUser() {\n    try {\n      const url = `${baseUrl}/api/account`\n      const payload = { headers: { Authorization: token }}\n      await axios.post(url, {}, payload)\n        .then(response => {\n          if (response.data.success) {\n            dispatch({ type: \"SET_USER\", user: response.data.user })\n            console.log(state)\n          } else {\n            dispatch({ type: \"CLEAR\" })\n          }\n        })\n        .catch(error => console.log(\"Error\", error))\n    } catch(error) {\n      cookie.remove(\"reactreserve_token\");\n      router.push(\"/login\")\n    }\n\n  }\n  if (token) {\n    validateUser();\n  } else {\n    if (isProtectedRoute) {\n      router.push(\"/login\")\n    }\n  }\n\n  return {\n    props: {}, // will be passed to the page component as props\n  }\n}\n\n\nexport default Validation;"]},"metadata":{},"sourceType":"module"}