{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport cookies from \"js-cookie\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport baseUrl from \"../../utils/baseUrl\";\nimport { Context } from \"../Store/Store\";\n\nfunction Validation({\n  children\n}) {\n  return __jsx(React.Fragment, null, children);\n}\n\nexport function getUserLoggedIn() {\n  const {\n    0: state,\n    1: dispatch\n  } = useContext(Context);\n  const token = cookies.get('reactreserve_token');\n  const router = useRouter();\n  const pathname = router.pathname;\n  const isProtectedRoute = pathname === \"/account\" || pathname === \"/create\";\n\n  async function validateUser() {\n    try {\n      const url = `${baseUrl}/api/account`;\n      const payload = {\n        headers: {\n          Authorization: token\n        }\n      };\n      await axios.post(url, {}, payload).then(response => {\n        if (response.data.success) {\n          dispatch({\n            type: \"SET_USER\",\n            user: response.data.user\n          });\n          console.log(state);\n        } else {\n          dispatch({\n            type: \"CLEAR\"\n          });\n        }\n      }).catch(error => console.log(\"Error\", error));\n    } catch (error) {\n      cookie.remove(\"reactreserve_token\");\n      router.push(\"/login\");\n    }\n  }\n\n  if (token) {\n    validateUser();\n  } else {\n    if (isProtectedRoute) {\n      router.push(\"/login\");\n    }\n  }\n}\nexport default Validation;","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/components/Validation/Validation.js"],"names":["React","useContext","cookies","useRouter","axios","baseUrl","Context","Validation","children","getUserLoggedIn","state","dispatch","token","get","router","pathname","isProtectedRoute","validateUser","url","payload","headers","Authorization","post","then","response","data","success","type","user","console","log","catch","error","cookie","remove","push"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAkC;AAChC,SACE,4BACIA,QADJ,CADF;AAKD;;AAED,OAAO,SAASC,eAAT,GAA2B;AAChC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBV,UAAU,CAACK,OAAD,CAApC;AACA,QAAMM,KAAK,GAAGV,OAAO,CAACW,GAAR,CAAY,oBAAZ,CAAd;AACA,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAMY,QAAQ,GAAGD,MAAM,CAACC,QAAxB;AACA,QAAMC,gBAAgB,GAAID,QAAQ,KAAK,UAAb,IAA2BA,QAAQ,KAAK,SAAlE;;AAEA,iBAAeE,YAAf,GAA8B;AAC5B,QAAI;AACF,YAAMC,GAAG,GAAI,GAAEb,OAAQ,cAAvB;AACA,YAAMc,OAAO,GAAG;AAAEC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAET;AAAjB;AAAX,OAAhB;AACA,YAAMR,KAAK,CAACkB,IAAN,CAAWJ,GAAX,EAAgB,EAAhB,EAAoBC,OAApB,EACHI,IADG,CACEC,QAAQ,IAAI;AAChB,YAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACzBf,UAAAA,QAAQ,CAAC;AAAEgB,YAAAA,IAAI,EAAE,UAAR;AAAoBC,YAAAA,IAAI,EAAEJ,QAAQ,CAACC,IAAT,CAAcG;AAAxC,WAAD,CAAR;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAZ;AACD,SAHD,MAGO;AACLC,UAAAA,QAAQ,CAAC;AAAEgB,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAR;AACD;AACF,OARG,EASHI,KATG,CASGC,KAAK,IAAIH,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,KAArB,CATZ,CAAN;AAUD,KAbD,CAaE,OAAMA,KAAN,EAAa;AACbC,MAAAA,MAAM,CAACC,MAAP,CAAc,oBAAd;AACApB,MAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACD;AAEF;;AACD,MAAIvB,KAAJ,EAAW;AACTK,IAAAA,YAAY;AACb,GAFD,MAEO;AACL,QAAID,gBAAJ,EAAsB;AACpBF,MAAAA,MAAM,CAACqB,IAAP,CAAY,QAAZ;AACD;AACF;AACF;AAGD,eAAe5B,UAAf","sourcesContent":["import React, { useContext } from \"react\";\nimport cookies from \"js-cookie\";\nimport { useRouter } from \"next/router\"\nimport axios from \"axios\"\nimport baseUrl from \"../../utils/baseUrl\";\nimport { Context } from \"../Store/Store\";\n\nfunction Validation({ children }) {\n  return (\n    <>\n      { children }\n    </>\n  )\n}\n\nexport function getUserLoggedIn() {\n  const [state, dispatch] = useContext(Context);\n  const token = cookies.get('reactreserve_token')\n  const router = useRouter();\n  const pathname = router.pathname;\n  const isProtectedRoute = (pathname === \"/account\" || pathname === \"/create\");\n\n  async function validateUser() {\n    try {\n      const url = `${baseUrl}/api/account`\n      const payload = { headers: { Authorization: token }}\n      await axios.post(url, {}, payload)\n        .then(response => {\n          if (response.data.success) {\n            dispatch({ type: \"SET_USER\", user: response.data.user })\n            console.log(state)\n          } else {\n            dispatch({ type: \"CLEAR\" })\n          }\n        })\n        .catch(error => console.log(\"Error\", error))\n    } catch(error) {\n      cookie.remove(\"reactreserve_token\");\n      router.push(\"/login\")\n    }\n\n  }\n  if (token) {\n    validateUser();\n  } else {\n    if (isProtectedRoute) {\n      router.push(\"/login\")\n    }\n  }\n}\n\n\nexport default Validation;"]},"metadata":{},"sourceType":"module"}