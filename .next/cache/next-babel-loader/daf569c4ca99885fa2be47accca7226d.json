{"ast":null,"code":"var _jsxFileName = \"/Users/renanyudi/Sites/estudos/react-app/react-next/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Layout from \"../components/_App/Layout\";\nimport React from \"react\";\nimport { parseCookies, destroyCookie } from \"nookies\";\nimport Store from \"./../components/Store/Store\";\nimport App from \"next/app\";\nimport baseUrl from \"../utils/baseUrl\";\nimport { redirectUser } from \"../utils/auth\";\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      token\n    } = parseCookies(ctx);\n    console.log(\"reactreserve_token\", token);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === \"/account\" || ctx.pathname === \"/create\";\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        const isRoot = user.role === \"root\";\n        const isAdmin = user.role === \"admin\"; // if authenticated, but not of role 'admin' or 'root', redirect from '/create' page\n\n        const isNotPermitted = !(isRoot || isAdmin) && ctx.pathname === \"/create\";\n\n        if (isNotPermitted) {\n          redirectUser(ctx, \"/\");\n        }\n\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error); // 1) Throw out invalid token\n\n        destroyCookie(ctx, \"reactreserve_token\"); // 2) Redirect to login\n\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Store, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, __jsx(Layout, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }))));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/_app.js"],"names":["Layout","React","parseCookies","destroyCookie","Store","App","baseUrl","redirectUser","MyApp","getInitialProps","Component","ctx","token","console","log","pageProps","isProtectedRoute","pathname","payload","headers","Authorization","url","response","axios","get","user","data","isRoot","role","isAdmin","isNotPermitted","error","render","props"],"mappings":";;;;;AAAA,OAAOA,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,SAA5C;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,YAAT,QAA6B,eAA7B;;AAEA,MAAMC,KAAN,SAAoBH,GAApB,CAAwB;AAEtB,eAAaI,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAM;AAAEC,MAAAA;AAAF,QAAYV,YAAY,CAACS,GAAD,CAA9B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,KAAlC;AAEA,QAAIG,SAAS,GAAG,EAAhB;;AAEA,QAAIL,SAAS,CAACD,eAAd,EAA+B;AAC7BM,MAAAA,SAAS,GAAG,MAAML,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD;;AAGD,QAAI,CAACC,KAAL,EAAY;AACV,YAAMI,gBAAgB,GACpBL,GAAG,CAACM,QAAJ,KAAiB,UAAjB,IAA+BN,GAAG,CAACM,QAAJ,KAAiB,SADlD;;AAEA,UAAID,gBAAJ,EAAsB;AACpBT,QAAAA,YAAY,CAACI,GAAD,EAAM,QAAN,CAAZ;AACD;AACF,KAND,MAMO;AACL,UAAI;AACF,cAAMO,OAAO,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,aAAa,EAAER;AAAjB;AAAX,SAAhB;AACA,cAAMS,GAAG,GAAI,GAAEf,OAAQ,cAAvB;AACA,cAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAUH,GAAV,EAAeH,OAAf,CAAvB;AACA,cAAMO,IAAI,GAAGH,QAAQ,CAACI,IAAtB;AACA,cAAMC,MAAM,GAAGF,IAAI,CAACG,IAAL,KAAc,MAA7B;AACA,cAAMC,OAAO,GAAGJ,IAAI,CAACG,IAAL,KAAc,OAA9B,CANE,CAOF;;AACA,cAAME,cAAc,GAClB,EAAEH,MAAM,IAAIE,OAAZ,KAAwBlB,GAAG,CAACM,QAAJ,KAAiB,SAD3C;;AAEA,YAAIa,cAAJ,EAAoB;AAClBvB,UAAAA,YAAY,CAACI,GAAD,EAAM,GAAN,CAAZ;AACD;;AACDI,QAAAA,SAAS,CAACU,IAAV,GAAiBA,IAAjB;AACD,OAdD,CAcE,OAAOM,KAAP,EAAc;AACdlB,QAAAA,OAAO,CAACkB,KAAR,CAAc,4BAAd,EAA4CA,KAA5C,EADc,CAEd;;AACA5B,QAAAA,aAAa,CAACQ,GAAD,EAAM,oBAAN,CAAb,CAHc,CAId;;AACAJ,QAAAA,YAAY,CAACI,GAAD,EAAM,QAAN,CAAZ;AACD;AACF;;AAED,WAAO;AAAEI,MAAAA;AAAF,KAAP;AACD;;AAEDiB,EAAAA,MAAM,GAAG;AAEP,UAAM;AAAEtB,MAAAA,SAAF;AAAaK,MAAAA;AAAb,QAA2B,KAAKkB,KAAtC;AAEA,WACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD,eAAalB,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACA,MAAC,SAAD,eAAgBA,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADA,CADF,CADF;AAQD;;AA1DqB;;AA6DxB,eAAeP,KAAf","sourcesContent":["import Layout from \"../components/_App/Layout\";\nimport React from \"react\";\nimport { parseCookies, destroyCookie } from \"nookies\";\nimport Store from \"./../components/Store/Store\";\nimport App from \"next/app\";\nimport baseUrl from \"../utils/baseUrl\";\nimport { redirectUser } from \"../utils/auth\"\n\nclass MyApp extends App {\n\n  static async getInitialProps({ Component, ctx }) {\n    const { token } = parseCookies(ctx);\n    console.log(\"reactreserve_token\", token)\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n\n    if (!token) {\n      const isProtectedRoute =\n        ctx.pathname === \"/account\" || ctx.pathname === \"/create\";\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = { headers: { Authorization: token } };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        const isRoot = user.role === \"root\";\n        const isAdmin = user.role === \"admin\";\n        // if authenticated, but not of role 'admin' or 'root', redirect from '/create' page\n        const isNotPermitted =\n          !(isRoot || isAdmin) && ctx.pathname === \"/create\";\n        if (isNotPermitted) {\n          redirectUser(ctx, \"/\");\n        }\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error);\n        // 1) Throw out invalid token\n        destroyCookie(ctx, \"reactreserve_token\");\n        // 2) Redirect to login\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return { pageProps };\n  }\n\n  render() {\n\n    const { Component, pageProps } = this.props;\n\n    return (\n      <Store>\n        <Layout { ...pageProps }>\n        <Component { ...pageProps } />\n        </Layout>\n      </Store>\n      \n    );\n  }\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}