{"ast":null,"code":"var _jsxFileName = \"/Users/renanyudi/Sites/estudos/react-app/react-next/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Layout from \"../components/_App/Layout\";\nimport React from \"react\";\nimport { parseCookies, destroyCookie } from \"nookies\";\nimport Store from \"./../components/Store/Store\";\nimport App from \"next/app\";\nimport baseUrl from \"../utils/baseUrl\";\nimport { redirectUser } from \"../utils/auth\";\nimport axios from \"axios\";\nimport Router from \"next/router\";\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"syncLogout\", event => {\n      if (event.key === \"logout\") {\n        Router.push(\"/login\");\n      }\n    });\n  }\n\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      reactreserve_token\n    } = parseCookies(ctx);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!reactreserve_token) {\n      const isProtectedRoute = ctx.pathname === \"/account\" || ctx.pathname === \"/create\";\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: reactreserve_token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data.user;\n        const isRoot = user.role === \"root\";\n        const isAdmin = user.role === \"admin\"; // if authenticated, but not of role 'admin' or 'root', redirect from '/create' page\n\n        const isNotPermitted = !(isRoot || isAdmin) && (ctx.pathname === \"/create\" || ctx.pathname === \"/login\");\n\n        if (isNotPermitted) {\n          redirectUser(ctx, \"/\");\n        }\n\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error); // 1) Throw out invalid token\n\n        destroyCookie(ctx, \"reactreserve_token\"); // 2) Redirect to login\n\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  componentDidMount() {\n    //vai detectar quando o localstorage foi alterado\n    //isso é bom para logout universal, em todas as janelas abertas do site no momento (naquele navegador)\n    window.addEventListener('storage', this.syncLogout); //segundo arg e uma callback para o evento de localstorage\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Store, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, __jsx(Layout, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }), __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }))));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/renanyudi/Sites/estudos/react-app/react-next/pages/_app.js"],"names":["Layout","React","parseCookies","destroyCookie","Store","App","baseUrl","redirectUser","axios","Router","MyApp","event","key","push","getInitialProps","Component","ctx","reactreserve_token","pageProps","isProtectedRoute","pathname","payload","headers","Authorization","url","response","get","user","data","isRoot","role","isAdmin","isNotPermitted","error","console","componentDidMount","window","addEventListener","syncLogout","render","props"],"mappings":"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","sourcesContent":["import Layout from \"../components/_App/Layout\";\nimport React from \"react\";\nimport { parseCookies, destroyCookie } from \"nookies\";\nimport Store from \"./../components/Store/Store\";\nimport App from \"next/app\";\nimport baseUrl from \"../utils/baseUrl\";\nimport { redirectUser } from \"../utils/auth\"\nimport axios from \"axios\";\nimport Router from \"next/router\";\n\nclass MyApp extends App {\n\n  static async getInitialProps({ Component, ctx }) {\n    const { reactreserve_token } = parseCookies(ctx);\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n\n    if (!reactreserve_token) {\n      const isProtectedRoute =\n        ctx.pathname === \"/account\" || ctx.pathname === \"/create\";\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = { headers: { Authorization: reactreserve_token } };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data.user;\n        const isRoot = user.role === \"root\";\n        const isAdmin = user.role === \"admin\";\n        // if authenticated, but not of role 'admin' or 'root', redirect from '/create' page\n        const isNotPermitted = !(isRoot || isAdmin) && (ctx.pathname === \"/create\" || ctx.pathname === \"/login\");\n        if (isNotPermitted) {\n          redirectUser(ctx, \"/\");\n        }\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error);\n        // 1) Throw out invalid token\n        destroyCookie(ctx, \"reactreserve_token\");\n        // 2) Redirect to login\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return { pageProps };\n  }\n\n  componentDidMount() {\n    //vai detectar quando o localstorage foi alterado\n    //isso é bom para logout universal, em todas as janelas abertas do site no momento (naquele navegador)\n    window.addEventListener('storage', this.syncLogout) //segundo arg e uma callback para o evento de localstorage\n  }\n\n  syncLogout = event => {\n    if (event.key === \"logout\") {\n      Router.push(\"/login\")\n    }\n  }\n\n  render() {\n\n    const { Component, pageProps } = this.props;\n\n    return (\n      <Store>\n        <Layout { ...pageProps }>\n        <Component { ...pageProps } />\n        </Layout>\n      </Store>\n    );\n  }\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}