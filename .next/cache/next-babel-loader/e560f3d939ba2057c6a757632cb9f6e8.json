{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from \"react\";\nimport Reducer from \"./Reducer\";\nimport cookies from \"js-cookie\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport baseUrl from \"../../utils/baseUrl\";\nimport { Context } from \"../Store/Store\";\n\nfunction Validation({\n  children\n}) {\n  const {\n    0: state,\n    1: dispatch\n  } = useContext(Context);\n  const token = cookies.get('reactreserve_token');\n  const router = useRouter();\n  const pathname = router.pathname;\n  const isProtectedRoute = pathname === \"/account\" || pathname === \"/create\";\n  React.useEffect(() => {\n    async function validateUser() {\n      try {\n        const url = `${baseUrl}/api/account`;\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        await axios.post(url, {}, payload).then(response => {\n          console.log(response.data.success);\n\n          if (response.data.success) {\n            dispatch({\n              type: \"SET_USER\",\n              user: user\n            });\n          } else {\n            dispatch({\n              type: \"CLEAR\"\n            });\n          }\n        }).catch(error => console.log(error));\n      } catch (error) {\n        cookie.remove(\"reactreserve_token\");\n        router.push(\"/login\");\n      }\n    }\n\n    if (token) {\n      validateUser();\n    } else {\n      if (isProtectedRoute) {\n        router.push(\"/login\");\n      }\n    }\n  });\n  return __jsx(React.Fragment, null, children);\n}\n\nexport default Validation;","map":null,"metadata":{},"sourceType":"module"}