{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport User from \"../../models/User\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLenght from \"validator/lib/isLength\";\nimport Cart from \"../../models/Cart\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password\n  } = req.body;\n\n  try {\n    //0) Validade name/email/pass\n    if (!isLenght(name, {\n      min: 3,\n      max: 10\n    })) {\n      return res.json({\n        success: false,\n        msg: \"Name must be 3-10 characters long.\"\n      });\n    } else if (!isLenght(password, {\n      min: 4\n    })) {\n      return res.json({\n        success: false,\n        msg: \"Password must be at least 4 characters long.\"\n      });\n    } else if (!isEmail(email)) {\n      return res.json({\n        success: false,\n        msg: \"Email not valid\"\n      });\n    } //1) Check if user exist\n\n\n    const user = await User.findOne({\n      email: email\n    });\n\n    if (user) {\n      return res.json({\n        success: false,\n        msg: \"User already exist.\"\n      });\n    } //2) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); //saltRounds 10\n    //3) create user\n\n    const newUser = await new User({\n      name: name,\n      email: email,\n      password: hash\n    }).save(); //3.5) create new cart for user\n\n    await new Cart({\n      user: newUser._id\n    }).save(); //4) create token for the new user\n    //em 7 dias, o token n sera mais valido e o usuario tera que logar de novo pra gerar outro\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: '7d'\n    }); //5) send back token\n\n    res.json({\n      success: true,\n      token: token\n    });\n  } catch (error) {\n    console.log(error);\n    res.json({\n      \"success\": false,\n      \"msg\": \"Error signup user. Please, try again later\"\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}